{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","i","SearchBox","type","placeholder","onChange","handleChange","App","state","searchField","e","setState","target","value","console","log","fetch","then","response","json","user","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2TAGaA,EAAO,SAACC,GACpB,OACC,sBAAKC,UAAU,iBAAf,UACC,qBACCC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,2BACHC,IAAKL,EAAMG,QAAQG,OAEpB,6BAAKN,EAAMG,QAAQG,OACnB,4BAAIN,EAAMG,QAAQI,YCPRC,G,MAAW,SAACR,GACxB,OACC,qBAAKC,UAAU,YAAf,SACED,EAAMS,SAASC,KAAI,SAACP,EAASQ,GAAV,OACnB,cAAC,EAAD,CAAuBR,QAASA,GAArBA,EAAQC,WCLVQ,G,MAAY,SAACZ,GACzB,OACC,uBACCC,UAAU,SACVY,KAAK,SACLC,YAAad,EAAMc,YACnBC,SAAUf,EAAMgB,iBCiCJC,E,4MAnCdC,MAAQ,CACPT,SAAU,GACVU,YAAa,I,EASdH,aAAe,SAACI,GACf,EAAKC,SAAS,CAAEF,YAAaC,EAAEE,OAAOC,QAAS,kBAE9CC,QAAQC,IAAI,EAAKP,MAAMC,iB,uDATzB,WAAqB,IAAD,OACnBO,MAAM,8CACJC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAU,EAAKT,SAAS,CAAEZ,SAAUqB,S,oBAS5C,WAAU,IAAD,EAC0BC,KAAKb,MAA/BT,EADA,EACAA,SAAUU,EADV,EACUA,YACZa,EAAmBvB,EAASwB,QAAO,SAAC9B,GAAD,OACxCA,EAAQG,KAAK4B,cAAcC,SAAShB,EAAYe,kBAEjD,OACC,sBAAKjC,UAAU,MAAf,UACA,8CACC,cAAC,EAAD,CACCa,YAAY,iBACZE,aAAce,KAAKf,eAEpB,cAAC,EAAD,CAAUP,SAAUuB,W,GA9BNI,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.9bf73e28.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\nexport const Card = (props) => {\r\n\treturn (\r\n\t\t<div className='card-container'>\r\n\t\t\t<img\r\n\t\t\t\tsrc={`https://robohash.org/${props.monster.id}/?set=set2&size=180x180`}\r\n\t\t\t\talt={props.monster.name}\r\n\t\t\t/>\r\n\t\t\t<h2>{props.monster.name}</h2>\r\n\t\t\t<p>{props.monster.email}</p>\r\n\t\t</div>\r\n\t);\r\n};\r\n","import React from 'react';\r\nimport { Card } from '../card/card.component';\r\nimport './card-list.styles.css';\r\n\r\nexport const CardList = (props) => {\r\n\treturn (\r\n\t\t<div className='card-list'>\r\n\t\t\t{props.monsters.map((monster, i) => (\r\n\t\t\t\t<Card key={monster.id} monster={monster} />\r\n\t\t\t))}\r\n\t\t</div>\r\n\t);\r\n};\r\n","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = (props) => {\r\n\treturn (\r\n\t\t<input\r\n\t\t\tclassName='search'\r\n\t\t\ttype='search'\r\n\t\t\tplaceholder={props.placeholder}\r\n\t\t\tonChange={props.handleChange}\r\n\t\t/>\r\n\t);\r\n};\r\n","import React, { Component } from 'react';\n\nimport './App.css';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nclass App extends Component {\n\tstate = {\n\t\tmonsters: [],\n\t\tsearchField: '',\n\t};\n\n\tcomponentDidMount() {\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t\t.then((response) => response.json())\n\t\t\t.then((user) => this.setState({ monsters: user }));\n\t}\n\n\thandleChange = (e) => {\n\t\tthis.setState({ searchField: e.target.value }, () =>\n\t\t\t// setState is async so to get the live update i.e(this.state.searchField) we used callback which is 2nd argument of setState\n\t\t\tconsole.log(this.state.searchField)\n\t\t);\n\t};\n\trender() {\n\t\tconst { monsters, searchField } = this.state;\n\t\tconst filteredMonsters = monsters.filter((monster) =>\n\t\t\tmonster.name.toLowerCase().includes(searchField.toLowerCase())\n\t\t);\n\t\treturn (\n\t\t\t<div className='App'>\n\t\t\t<h1>Monster Card</h1>\n\t\t\t\t<SearchBox\n\t\t\t\t\tplaceholder='search monster'\n\t\t\t\t\thandleChange={this.handleChange}\n\t\t\t\t/>\n\t\t\t\t<CardList monsters={filteredMonsters} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}